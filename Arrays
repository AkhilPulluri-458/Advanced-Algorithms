#include <iostream>
#include <unordered_map>
#include <vector>

std::vector<int> twoSum(std::vector<int>& nums, int target)
{
    std::unordered_map<int, int> given_num;
    for (int i = 0; i < nums.size(); i++)
{
        int complement = target - nums[i];
        if (given_num.find(complement) != given_num.end())
{
            return {given_num[complement], i};
        }
        given_num[nums[i]] = i;
    }
    return {};
}

int main()
{
    int n, target;

    // Get the size of the array
    std::cout << "Enter the number of elements in the array:";
    std::cin >> n;

    std::vector<int> nums(n);

    // Get the elements of the array
    std::cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++)
    {
        std::cin >> nums[i];
    }

    // target value
    std::cout << "Enter the target value: ";
    std::cin >> target;

    // two indices
    std::vector<int> result = twoSum(nums, target);

    if (!result.empty()) 
    {
        std::cout << "Indices: " << result[0] << ", " << result[1] << std::endl;
    } 
    else
    {
        std::cout << "solution not found." << std::endl;
    }

    return 0;
}
