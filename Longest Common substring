#include <iostream>
#include <string>
#include <vector>
using namespace std;
string find_longest_common_substring(const string& s1, const string& s2) 
{
    int m = s1.length();
    int n = s2.length();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    for (int i = 1; i <= m; ++i)
{
        for (int j = 1; j <= n; ++j) 
{
            if (s1[i - 1] == s2[j - 1])
{
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } 
else 
{
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    // Maximum value in the DP table
    int max_length = 0;
    int max_i = 0;
    int max_j = 0;
    for (int i = 1; i <= m; ++i) 
{
        for (int j = 1; j <= n; ++j) 
{
            if (dp[i][j] > max_length) 
{
                max_length = dp[i][j];
                max_i = i;
                max_j = j;
            }
        }
    }
    // Reconstruct the Longest common string value
    string longest;
    while (max_i > 0 && max_j > 0 && dp[max_i][max_j] > 0)
{
        if (s1[max_i - 1] == s2[max_j - 1]) 
{
            longest.insert(0, 1, s1[max_i - 1]);
            --max_i;
            --max_j;
        }
else if (dp[max_i - 1][max_j] > dp[max_i][max_j - 1]) 
{
            --max_i;
        }
else 
{
            --max_j;
        }
    }
    return longest;
}
int main()
{
    string s1, s2;
    cout << "Enter the first string: ";
    cin >> s1;
    cout << "Enter the second string: ";
    cin >> s2;
    string longest = find_longest_common_substring(s1, s2);
    cout << "Longest Common Substring: " << longest << endl;
    return 0;
}
